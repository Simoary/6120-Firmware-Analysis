import os
import re
import sys
import subprocess
from tabulate import tabulate

def analyze_extracted_files(directory, vulnerability_patterns):
    vulnerabilities_found = []

    for root, _, files in os.walk(directory):
        for file in files:
            file_path = os.path.join(root, file)

            if os.path.isfile(file_path):
                with open(file_path, 'rb') as f:
                    content = f.read().decode('utf-8', errors='ignore')

                for pattern, vulnerability_type in vulnerability_patterns:
                    for match in re.finditer(pattern, content, re.MULTILINE | re.IGNORECASE):
                        vulnerabilities_found.append({
                            "Type": vulnerability_type,
                            "File": file_path,
                            "Match": match.group()
                        })

    return vulnerabilities_found

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python analyze_firmware.py <firmware_file>")
        sys.exit(1)

    firmware_file = sys.argv[1]

    # Run binwalk to extract files and redirect output to a file
    binwalk_output_file = "binwalk_output.txt"
    binwalk_command = ["binwalk", "-Me", "-D", "output_directory", firmware_file]
    
    with open(binwalk_output_file, "w") as binwalk_output:
        subprocess.run(binwalk_command, stdout=binwalk_output, stderr=binwalk_output)
    
    vulnerability_patterns = [
        (r'(\||;|\$|\() *\w+', "Command Injection via pipes, semicolons, or parentheses"),
        (r'`[^\x00-\x7F]*`', "Command Injection via backticks"),
        (r'(\s|-)([a-zA-Z0-9_-]+)(\s|=)\$[^;]*;', "Command Injection via variable assignment"),
    ]

    vulnerabilities_found = analyze_extracted_files("output_directory", vulnerability_patterns)

    found_vulnerabilities = set(vuln["Type"] for vuln in vulnerabilities_found)
    
    results = []
    for pattern, vulnerability_type in vulnerability_patterns:
        if vulnerability_type in found_vulnerabilities:
            results.append([vulnerability_type, "Found"])
        else:
            results.append([vulnerability_type, "Not found"])
    
    table = tabulate(results, headers=["Vulnerability Type", "Status"], tablefmt="grid")
    print(table)

