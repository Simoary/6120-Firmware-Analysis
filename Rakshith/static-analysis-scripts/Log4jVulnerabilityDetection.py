import os
import re
import argparse
from prettytable import PrettyTable

def search_for_log4j_exploits(folder_path):
    log4j_patterns = [
        r'(log4j\.|org\.apache\.log4j)',
        r'import\s+org\.apache\.log4j\.',
        r'log4j\.xml',
        r'log4j\.properties',
        r'log4j\.configFile',
        r'log4j\.appender\.',
        r'log4j\.category\.',
        r'log4j\.rootCategory',
    ]

    potential_exploits = []
    scanned_files = []

    for root, dirs, files in os.walk(folder_path):
        for file in files:
            file_path = os.path.join(root, file)
            scanned_files.append(file_path)
            if file.endswith('.java') or file.endswith('.xml') or file.endswith('.properties'):
                with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
                    content = f.read()
                    for pattern in log4j_patterns:
                        if re.search(pattern, content):
                            potential_exploits.append((file_path, pattern))

    return scanned_files, potential_exploits

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Search for potential Log4j exploits in files.')
    parser.add_argument('folder_path', type=str, help='Path to the folder to search for exploits')
    args = parser.parse_args()

    folder_path = args.folder_path
    scanned_files, potential_exploits = search_for_log4j_exploits(folder_path)

    if scanned_files:
        print("Scanned Files:")
        for file_path in scanned_files:
            print(file_path)

    if potential_exploits:
        print("\nPotential Log4j Exploits:")
        table = PrettyTable()
        table.field_names = ["File", "Pattern"]
        for exploit_file, pattern in potential_exploits:
            table.add_row([exploit_file, pattern])
        print(table)
    else:
        print("No potential Log4j exploits found in the folder.")

