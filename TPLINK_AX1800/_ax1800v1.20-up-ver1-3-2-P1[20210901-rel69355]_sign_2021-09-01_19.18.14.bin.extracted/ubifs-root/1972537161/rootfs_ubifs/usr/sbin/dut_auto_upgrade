#!/bin/sh 

local TXSPEEDTHRELD=15000
local RXSPEEDTHRELD=15000
local test_seconds=30
local AUTO_UPDATE_MOD_ID=250
local LOG_INF_SKIP_UPGRADE=21
. /lib/functions.sh

debug_printf()
{
	echo "[auto_upgrade] $*" > /dev/console
}


wan_speed_busy()
{
	local rx_old_lo rx_old_hi tx_old_lo tx_old_hi rx_old_bytes tx_old_bytes
	local rx_new_lo rx_new_hi tx_new_lo tx_new_hi rx_new_bytes tx_new_bytes
	local rx_speed tx_speed rx_pkt tx_pkt
	local wan_unit wan_port wan_sec
	config_load switch
	config_get wan_sec wan switch_port "lan4wan"
	config_get wan_unit $wan_sec unit 0
	config_get wan_port $wan_sec port 1

	dmesg -c  >/dev/null 2>&1
	ethswctl -c mibdump -n $wan_unit -p $wan_port -a
	rx_old_lo=$(dmesg |grep RxOctetsLo |cut -d : -f 2-)
	rx_old_hi=$(dmesg |grep RxOctetsHi |cut -d : -f 2-)
	tx_old_lo=$(dmesg |grep TxOctetsLo |cut -d : -f 2-)
	tx_old_hi=$(dmesg |grep TxOctetsHi |cut -d : -f 2-)
	rx_old_bytes=$(dmesg |grep RxBytes |cut -d : -f 2-)
	tx_old_bytes=$(dmesg |grep TxBytes |cut -d : -f 2-)
	sleep $test_seconds
	dmesg -c  >/dev/null 2>&1
	ethswctl -c mibdump -n $wan_unit -p $wan_port -a
	rx_new_lo=$(dmesg |grep RxOctetsLo |cut -d : -f 2-)
	rx_new_hi=$(dmesg |grep RxOctetsHi |cut -d : -f 2-)
	tx_new_lo=$(dmesg |grep TxOctetsLo |cut -d : -f 2-)
	tx_new_hi=$(dmesg |grep TxOctetsHi |cut -d : -f 2-)
	rx_new_bytes=$(dmesg |grep RxBytes |cut -d : -f 2-)
	tx_new_bytes=$(dmesg |grep TxBytes |cut -d : -f 2-)

	if [ -z "$rx_old_lo" -a -z "$tx_old_lo" -a -z "$rx_new_lo" -a -z "$tx_new_lo" ];then
		rx_pkt=$((rx_new_bytes - rx_old_bytes))
		tx_pkt=$((tx_new_bytes - tx_old_bytes))
	else
		## when mib statistics hi 32bit is not the same ,we treat as wan busy
		[ "$rx_old_hi" != "$rx_new_hi" -o "$tx_old_hi" != "$tx_new_hi" ] && return 0

		rx_pkt=$((rx_new_lo - rx_old_lo))
		tx_pkt=$((tx_new_lo - tx_old_lo))
	fi
	rx_speed=$((rx_pkt/test_seconds))
	tx_speed=$((tx_pkt/test_seconds))
	debug_printf "rxSpeed = $rx_speed, txSpeed = $tx_speed"

	if [ $rx_speed -gt $RXSPEEDTHRELD  -o $tx_speed -gt $TXSPEEDTHRELD ];then
		return 0
	else
		return 1
	fi

}

upgrade_ready()
{

	config_load cloud_config
	config_get fw_new_notify new_firmware fw_new_notify "0"
	config_load auto_upgrade
	config_get cloud_push upgrade cloud_push "0"
	if [ "$fw_new_notify" != "1" -o "$cloud_push" = "0" ];
	then
		debug_printf "no firmware to upgrade"
		return 1
	fi

	online-test
	if [ "$?" -ne 0 ];then
		debug_printf "online-test fail"
		return 1
	fi

	wan_speed_busy 
	if [ "$?" -eq 0 ];then
		debug_printf "clients are surfing internet, delay auto upgrade!"
		delayCount=$(uci get auto_upgrade.upgrade.delay)
		logx -p $$ $AUTO_UPDATE_MOD_ID $LOG_INF_SKIP_UPGRADE
		if [ $delayCount -lt 10 ];then	
			debug_printf "set upgrade.delay = $((delayCount+1)) "
			uci set auto_upgrade.upgrade.delay=$((delayCount+1))
			uci commit auto_upgrade
			uci_commit_flash
		fi
		return 1
	fi
	return 0
}

SYS_SET_TIME=$(uci_get_state systime core sync)
type=$(uci get -q system.ntp.type)
[ $SYS_SET_TIME -eq 0 -o "$type" != "auto" ] && exit 0

upgrade_ready
if [ "$?" -eq 0 ];then
	
	touch /tmp/auto_update_lock.lua
	sleep 5

	# kickoff web
	rm -rf /tmp/luci-sessions/*

    [ -f "/tmp/applogin_flag" ] && {
		lua -e "require('luci.controller.login').kickoff_app()"
		rm -f /tmp/applogin_flag
	}

	/usr/sbin/cloud_upgrade

fi

rm -f /tmp/auto_update_lock.lua
