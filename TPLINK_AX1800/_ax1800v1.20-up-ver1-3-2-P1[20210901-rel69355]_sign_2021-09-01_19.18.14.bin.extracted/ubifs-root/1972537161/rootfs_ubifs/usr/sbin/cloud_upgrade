#!/usr/bin/lua

local cloud_account = require "luci.controller.admin.cloud_account"
local dbg = require "luci.tools.debug"
local sys = require "luci.sys"
local fs    = require "luci.fs"
local firmware = require "luci.controller.admin.firmware"
local ret, data, percent
local count = 0
local maxcount = 5
local max_count_online = 10
local max_time = 180
local time = 0
local retval = false
local uci = require("luci.model.uci")
local CLOUD_DL_PID = "/tmp/cloud/download/cloud_up.bin.dlpid"
local AUTO_UPDATE_MOD_ID = 250
local LOG_INF_SKIP_UPGRADE = 21

local logm    = require "luci.model.log"


local function cloud_auto_update()
	--- download 
	ret = cloud_account.cloud_fw_upgrade()

	if not ret then
		dbg.print("[auto_upgrade] download new fw fail")
		return false
	end
	
	--- check download
	while true do
		data = cloud_account.detect_upgrade_status()

		if data == false then
			count = count + 1
		end


		if count > maxcount then
			dbg.print("[auto_upgrade] ret 5 times fail")
			return false
		end
	
		if data and data.percent and tonumber(data.percent) >= 100 then
			dbg.print("[auto_upgrade] download new fw success")
			break
		end

		time = time + 1
		if time > max_time then
			return false
		end

		sys.call("sleep 1")
	end

	-- check upgrade
	count = 0
	time = 0
	while true do
		ret, percent = firmware.upgrade_fwup_check()
		if ret == false then
			count = count + 1
		else
			if percent and tonumber(percent) >= 100 then
				return true
			end
		end

		if count > max_count_online then
			dbg.print("[auto_upgrade] upgrade fail")
			return false	
		end

		time = time + 1
		if time > max_time then
			return false
		end

		sys.call("sleep 1")
	end

end




retval = cloud_auto_update()

local uci_r = uci.cursor()
if retval == false then

	local pid = fs.readfile(CLOUD_DL_PID)
	local filepath = "/tmp/cloud_up.bin"
	--kill the download process
	if pid then
		pid = string.gsub(pid,"%c","")
	end
	if pid and fs.isfile("/proc/" .. pid .. "/status") then
		dbg.printf("kill the download process")
		sys.fork_call("kill -9 " .. pid)
	end

	-- remove file
	if fs.isfile(filepath) then
		fs.unlink(filepath)
	end

	dbg.print("[auto_upgrade] cloud_auto_update fail")
	delayCount = uci_r:get("auto_upgrade", "upgrade", "delay")
	local log  = logm.Log(AUTO_UPDATE_MOD_ID)
	log(LOG_INF_SKIP_UPGRADE)
	if tonumber(delayCount) < 10 then
		uci_r:set("auto_upgrade", "upgrade", "delay", tonumber(delayCount)+1)
		uci_r:commit("auto_upgrade")
	end
else
	dbg.print("[auto_upgrade] cloud_auto_update success")
	--if uci_r:get("auto_upgrade", "upgrade", "delay") ~= 0 then
		uci_r:set("auto_upgrade", "upgrade", "delay", 0)
		uci_r:set("auto_upgrade", "upgrade", "cloud_push", 0)
		uci_r:commit("auto_upgrade")
	--end
end






		
	
